#!/usr/bin/env python

from github import Github
import github
import typer

name2lasttested={
    "users-teams-applications.md":"2019-04-19",
    "byoip.md":"2019-04-23",
    "configuring-IPSEC-VPN.md":"2019-04-23",
    "linking-secure-network-enclosures.md":"2019-04-23",
    "nat-config-private.md":"2019-04-23",
    "secure-network-enclosure.md":"2019-04-23",
    "web-app-private-network.md":"2019-04-23",
    "multi-region-webapp.md":"2019-05-20",
    "create-manage-secure-apis.md":"2019-05-21",
    "continuous-deployment-to-kubernetes.md":"2019-05-23",
    "strategies-for-resilient-applications.md":"2019-05-28",
    "multi-region-k8s-cis.md":"2019-06-03",
    "serverless-mobile-backend.md":"2019-06-04",
    "vm-to-containers-and-kubernetes.md":"2019-06-10",
    "vpc-public-app-private-backend.md":"2019-06-17",
    "vpc-secure-management-bastion-server.md":"2019-06-17",
    "plan-create-update-deployments.md":"2019-06-18",
    "vpc-multi-region.md":"2019-06-18",
    "android-mobile-push-analytics.md":"2019-06-20",
    "vpc-app-deploy.md":"2019-08-05",
    "vpc-site2site-vpn.md":"2019-09-03",
    "android-watson-chatbot.md":"2019-10-22",
    "dynamic-content-cdn.md":"2019-10-24",
    "serverless-github-traffic-analytics.md":"2019-11-21",
    "scalable-webapp-kubernetes.md":"2019-11-22",
    "smart-data-lake.md":"2019-11-27",
    "gather-visualize-analyze-iot-data.md":"2019-12-04",
    "cloud-e2e-security.md":"2019-12-05",
    "index.md":"2020-01-20",
    "ios-mobile-push-analytics.md":"2020-01-29",
    "highly-available-and-scalable-web-application.md":"2020-04-08",
    "sql-database.md":"2020-04-15",
    "pub-sub-object-storage.md":"2020-05-08",
    "vmware-solutions-shared-getting-started.md":"2020-05-22",
    "multi-region-serverless.md":"2020-06-02",
    "serverless-api-webapp.md":"2020-06-03",
    "slack-chatbot-database-watson.md":"2020-06-12",
    "extended-app-security.md":"2020-06-25",
    "hpc-eda.md":"2020-07-20",
    "lamp-stack-on-vpc.md":"2020-07-23",
    "mean-stack.md":"2020-07-27",
    "application-log-analysis.md":"2020-08-12",
    "vpc-tg-dns-iam.md":"2020-09-01",
    "create-deploy-retrain-machine-learning-model.md":"2020-09-02",
    "image-classification-code-engine.md":"2020-09-23",
    "big-data-log-analytics.md":"2020-10-01",
    "scalable-webapp-openshift.md":"2020-10-06",
    "hpc-lsf-on-vpc.md":"2020-10-12",
    "openshift-microservices.md":"2020-10-20",
    "openshift-service-mesh.md":"2020-10-20",
    "static-files-cdn.md":"2020-11-04",
}

def repo_create_issue(title, labels, body):
    # print(f"{title} {labels} {body}")
    return repo.create_issue(title=title, labels=labels, body=body)

end_marker = "--- this body was generated by a script, check the boxes but do not make other edits ---\n"
def solution_tutorial_url(name, test=""):
    return f"https://{test}cloud.ibm.com/docs/solution-tutorials\?topic=solution-tutorials-{name[0:-3]}"

def body_text(name, lasttested):
    return f"""Tutorial lasttested: {lasttested} | [test.cloud.ibm.com]({solution_tutorial_url(name, "test.")}) | [cloud.ibm.com]({solution_tutorial_url(name)})
- [ ] Update the `lasttested` date in the tutorial
- [ ] Update the `lastupdated` date in the tutorial if you made changes
- [ ] Click all links in the tutorial

""" + end_marker

def create_issue(name, lasttested, title, expected_labels):
    return repo_create_issue(title=title, labels=list(expected_labels.values()), body=body_text(name, lasttested))

def fix_issue(name, lasttested, title, issue: github.Issue.Issue, expected_labels):
    issue.edit(body=body_text(name, lasttested), labels=list(expected_labels.keys()))

def issue_title(name):
    return f"Fall review of tutorial {name}"
    
def main(git_token: str = typer.Argument(..., envvar="GITTOKEN")):
    hostname="github.ibm.com"
    g = Github(base_url=f"https://{hostname}/api/v3", login_or_token=git_token)

    # Then play with your Github objects:
    repo = g.get_repo("Bluemix/cloud-portfolio-solutions")
    maintenance_label = repo.get_label("maintenance")
    solution_label = repo.get_label("solution")
    expected_labels = {maintenance_label.name: maintenance_label, solution_label.name: solution_label}
    all_issues = dict()
    open_issues = repo.get_issues()
    for issue in open_issues:
        all_issues[issue.title] = issue

    for name, lasttested in name2lasttested.items():
        title = issue_title(name)
        if title in all_issues:
            issue = all_issues[title]
            fix_issue(name, lasttested, title, issue, expected_labels)
        else:
            issue = create_issue(name, lasttested, title, expected_labels)
            all_issues[title] = issue

    # print out the epic table
    for name, lasttested in name2lasttested.items():
        title = issue_title(name)
        issue = all_issues[title]
        solution_url = solution_tutorial_url(name)
        st = issue.number
        print(f"| {lasttested} | {name} | [ST]({solution_url}) | #{st}")

    print("done")

if __name__ == "__main__":
    typer.run(main)
